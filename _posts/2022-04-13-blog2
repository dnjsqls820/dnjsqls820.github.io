!---
title:  '3. Model 생성' 
excerpt: 'Model create' 
categories: 
 - Django 
tags:
  - [Django,blog,postgrsql]
toc: true
toc_sticky: true
date: 2022-04-13
last_modified_at: 2022-04-13
---
# Model 생성 (회원가입, 로그인)

##  Model이란?

> MVT모델의 Model에 대해 공부해보겠습니다.
>
> ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fd3wTQI%2FbtqROeURiGg%2FJhQIGJXtiDMAKUh8jxLE2K%2Fimg.jpg)
>
> 모델은 쉽게 말해 데이터베이스에 저장할 데이터를 말합니다. 우리가 python 문법으로 모델을 만들면 django가 설정값에 따라 DB종류에 적합한 SQL 문으로 변환하여 DB에 테이블 및 데이터를 생성해 주게 됩니다. 이 기능을 장고의 ORM이라고 합니다.
>
> 데이터베이스에 여러 종류가 있지만 2020년 12월31일을 기준으로 장고가 공식적으로 지원하는 데이터베이스 종류는 다음과 같습니다
>
> > - PostgreSQL
> > - MariaDB
> > - MySQL
> > - Oracle
> > - SQLite
>
> DB는 프로젝트파일의 settings.py에서 확인 가능한데 기본 설정은 SQLite로 되어있지만 저희는 처음에 Postgresql로 바꿔서 Postgresql을 사용합니다.

## 1. user앱 생성

> 회원가입, 로그인 기능을 만들어 보겠습니다. 먼저 회원가입, 로그인 기능에 사용되는 User모델을 만들겠습니다. 모델을 만들기 전 home앱과는 구분하는게 좋으니 user앱을 새로 만들어줍니다.
>
> ~~~
> 1. django-admin startapp user
> 2. blog/setting.py에 user등록
> 3. user/urls.py파일 추가
> ~~~

## 2. Model 생성

>MVT의 Model은 models.py에서 만들게 됩니다. 따라서 user앱의 models.py로 들어갑니다.
>
>- 아이디
>- 비밀번호
>- 이름
>- 이메일
>- 계정 생성시간
>
>에 대한 정보만 만들어줍니다.
>
>다음과 같이 작성해줍니다.
>
>![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FUY5bM%2FbtqR6uIcV3g%2FoqmJocftMK5nDU0q30LVm1%2Fimg.png)
>
>모델은 파이썬의 class를 이용하여 만들게 되고 장고에서 제공하는 Field라는 개념을 이용하여 클래스 변수에 대한 형식을 지정하게 됩니다. 위의 내용을 하나하나 설명하자면
>
>1. 3번줄은 models.Model클래스를 상속받아 User라는 이름의 class를 생성합니다.
>2. 4~8줄은 장고는 Field라는 것 들을 제공하는데, 이는 데이터의 타입, 규칙을 결정하는 부분입니다. 4번 줄의 user_id에는 models.CharField라는 필드 규칙에 따라 데이터가 저장되는데 CharField는 문자열 필드를 의미합니다. 무조건 값을 입력해야되는 필수 argument로 max_length가 있고, 유일성을 의미하는 unique, 라벨을 의미하는 verbose_name등의 선탭 옵션도 추가할 수 있습니다.
>3. 7번 줄의 user_email에는 데이터를 이메일형식으로 저장하는 EmailField가 사용됐습니다.
>4. 8번 줄의 user_register_dttm에는 날짜와 시간 데이터를 저장하는 DateTimeField가 사용되었습니다. 날짜 시간과 관련된 필드의 경우 객체가 생성되면 자동으로 생성시간을 정해주는  auto_now_add 속성을 지정할 수 있습니다.
>
>![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdFuYsT%2FbtqRL4rsCYd%2FtVQrgX8VXoL6pWy5NiOwcK%2Fimg.png)
>
>def __ str __(self)는 생성된 객체의 이름을 지정하는 메서드입니다 이름에서도 알 수 있듯이 str타입을 리턴합니다. 이것을 등록하지 않으면 User 클래스로 생성된 object를 불러왔을 때 User object(1), User object(2)와 같은 이름으로 표시되기 때문에 구분이 어려워 등록해 줍니다.
>
>return 값으로 self.user_name을 등록했기 때문에 object를 불러오면 object의 user_name값으로 표시가 됩니다.
>
>5. class Meta:는 DB 테이블명을 지정해주는 옵션입니다.
>
>   db_table은 테이블명을 지정하는 옵션입니다.
>
>   verbose_name은 해당 테이블의 닉네임을 말합니다.
>
>   verbose_name_plural를 등록하지 않으면 유저s와 같이 복수형으로 표시될 때가 있으니 이것도 verbose_name과 똑같이 적어줍니다.

## 3. admin페이지에 등록

> 작성한 모델은 따로 등록을 해줘야 우리가 admin 페이지에서 볼 수 있습니다.
>
> 등록은 user앱의 admin.py에서 할 수 있습니다. 다음과 같이 적고 저정해줍니다.
>
> ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fb3LrzV%2FbtqR3SP9yXi%2FxXQvA8nnIOLMte4ApKsU7k%2Fimg.png)

## 4. 관리자계정 생성

> admin페이지에 접속하려면 계정을 먼저 만들어주어야 합니다. 따라서 다음 커맨드를 입력하여 admin 계정을 만들어주도록 합니다.
>
> ~~~
> python manage.py createsuperuser
> ~~~
>
> ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fc06WAs%2FbtqROe8i7VW%2FkWIOBG71ayK5ukdswOiGCk%2Fimg.png)
>
> 커맨드를 입력하여 이름, 이메일주소, 비밀번호를 입력합니다.
>
> 비밀번호가 짧다고 나오는데 상관없으니 y를 눌러 생성을 완료합니다.

## 5. 생성한 모델 확인

> 이제 python manage.py makemigrations 커맨드를 입력하여 로그파일을 만들어줍니다.![](https://ifh.cc/g/oZw3TJ.jpg)
>
> 로그파일을 만들어줬으면 python mange.py migrate로 서버에 등록을 해줍니다.
>
> ![](https://ifh.cc/g/y0p21c.png)
>
> 이제 runserver를 하여 브라우저를 열어 URL의 path에 admin을 입력하여 접속합니다.
>
> 방금전 createsuperuser를 통해 만들었던 계정으로 접속합니다
>
> 접속하면 다음과 같은 페이지가 나오는데 생성한 User모델이 보입니다.
>
> ![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbcWX08%2FbtqROdImeFE%2FSK6QFwlPyrRIz3tGrYq2oK%2Fimg.jpg)
>
> 유저 항목을 클릭해줍니다.
>
> 클릭 하고 화면 우측에 위치한 유저추가 + 버튼을 클릭하여 임의로 유저를 하나 만들어줍니다.
>
> ![](https://ifh.cc/g/4nnVTl.png)
>
> 유저정보 입력 후 저장
>
> ![](https://ifh.cc/g/3MWOHy.jpg)
>
> User 모델의 내용대로 계정이 생성된 것을 확인할 수 있습니다.

